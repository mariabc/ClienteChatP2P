/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package p2pchat;

import Datos.*;
import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.ListModel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author maria
 */
public class PrincipalChat extends javax.swing.JPanel {

    private ClienteImpl cliente;
    private ventana v;
    private String nick;
    private HashMap<String,IClienteP2P> amigosConectados;
    private Vector amigosNombre;
    private DefaultTableModel tabla;
    private HashMap<String, Chat> conversaciones;
    private CambiarPass cpass;
    /**
     * Creates new form PrincipalChat
     */
    public PrincipalChat(ClienteImpl cliente, String nick) {
        initComponents();
        v=new ventana();
        v.setSize(674, 446);
        this.cliente=cliente;
        amigosNombre= new Vector();
        listaAmigos.setListData(amigosNombre);
        this.nick=nick;
        v.setContentPane(this);
        v.setVisible(true);
        tabla= (DefaultTableModel) tablaPeticiones.getModel();
        tablaPeticiones.setModel(tabla);
        nickLabel.setText("Hola "+ this.nick);
        amigosConectados= new HashMap<String, IClienteP2P>();
        mandarSolicitud.setVisible(false);
        amigoBuscado.setText(" ");
        conversaciones= new HashMap<String, Chat>();
        
        
    }

     public ventana getV() {
        return v;
    }

    public void setV(ventana v) {
        this.v = v;
    }

    public String getNick() {
        return nick;
    }
    
    
    public void enviarMensaje(String mensaje, String receptor){
        
        Iterator it = amigosConectados.entrySet().iterator();
        
        while (it.hasNext()) {
            Map.Entry e = (Map.Entry) it.next();

            if (e.getKey().equals(receptor)) {
                try {
                    this.cliente.envioMensaje((IClienteP2P) e.getValue(), mensaje, nick);
                } catch (RemoteException ex) {
                    Logger.getLogger(PrincipalChat.class.getName()).log(Level.SEVERE, null, ex);
                }
                break;
            }
        }



    } 
    
    public void recibirMensaje(String mensaje, String emisor){
       Iterator it = amigosConectados.entrySet().iterator();
       Chat chat;
        
        

        if (!conversaciones.containsKey(emisor)) {
            chat = new Chat(nick, emisor , this);
            conversaciones.put(emisor, chat);

        } else {
            chat = (Chat) conversaciones.get(emisor);
        }
        
        chat.setVisible(true);
        chat.escribePantalla(mensaje);
    
    
    }
    
    
    public void resultadoBusqueda(String nombreAmigo){
     
        amigoBuscado.setText(nombreAmigo);
        mandarSolicitud.setVisible(true);
    
    }
    
     public void cambiarContrasenha (String nick, String newPass, String oldPass){
        try {
            cliente.cambiarContrasenha(nick, newPass, oldPass);
        } catch (RemoteException ex) {
            Logger.getLogger(PrincipalChat.class.getName()).log(Level.SEVERE, null, ex);
        }
     
     }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    public void actualizaLista(Amigo amigo, boolean borrar){
        
        if(borrar!=true){
        amigosConectados.put(amigo.getNick(), amigo.getCliente());
        amigosNombre.add(amigo.getNick());}
        
        else{
        amigosConectados.remove(amigo.getNick());
        amigosNombre.remove(amigo.getNick());
        if(conversaciones.containsKey(amigo.getNick())) conversaciones.remove(amigo.getNick());
        
        }
        
        listaAmigos.setListData(amigosNombre);
    
    }
    
    public void actualizaLista(ArrayList<Amigo> amigos){
        
        
        for(int i=0; i<amigos.size();i++){
        amigosConectados.put(amigos.get(i).getNick(), amigos.get(i).getCliente());
        amigosNombre.add(amigos.get(i).getNick());
        }
        listaAmigos.setListData(amigosNombre);
        
    }
    
    public void anhadirTabla(ArrayList<String> amistad){
    
    Object[] fila = new Object[2];
   
    for(int i=0;i<amistad.size();i++){
    fila[0]=amistad.get(i);
    tabla.addRow(fila);
    }
     
    this.tablaPeticiones.setModel(tabla);
    
    }
    
      
    public void anhadirTabla(String nombre){
    
    Object[] fila = new Object[2];
    fila[0]=nombre;
   
    tabla.addRow(fila);
    
    
    this.tablaPeticiones.setModel(tabla);
    
    }
    
    public void mensajeError(String error){
    
       cpass.cambiarMensaje(error);
    
    }
   
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        nickLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        listaAmigos = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();
        iniciarChat = new javax.swing.JButton();
        cerrarSesion = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaPeticiones = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        anhadirAmigos = new javax.swing.JButton();
        buscar = new javax.swing.JTextField();
        buscarBoton = new javax.swing.JButton();
        amigoBuscado = new javax.swing.JLabel();
        mandarSolicitud = new javax.swing.JButton();
        cambiarPass = new javax.swing.JButton();

        setSize(new java.awt.Dimension(674, 476));

        nickLabel.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        nickLabel.setText("jLabel1");

        listaAmigos.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(listaAmigos);

        jLabel1.setText("Amigos conectados");

        iniciarChat.setText("Enviar mensaje");
        iniciarChat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                iniciarChatActionPerformed(evt);
            }
        });

        cerrarSesion.setText("Cerrar sesión");
        cerrarSesion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cerrarSesionActionPerformed(evt);
            }
        });

        tablaPeticiones.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nombre", "Aceptar"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tablaPeticiones);

        jLabel2.setText("Busca a tus amigos!!");

        jLabel3.setText("Solicitudes de amistad");

        anhadirAmigos.setText("Añadir amigos");
        anhadirAmigos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                anhadirAmigosActionPerformed(evt);
            }
        });

        buscarBoton.setText("Buscar");
        buscarBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarBotonActionPerformed(evt);
            }
        });

        amigoBuscado.setText("jLabel4");

        mandarSolicitud.setText("Mandar solicitud amistad");
        mandarSolicitud.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mandarSolicitudActionPerformed(evt);
            }
        });

        cambiarPass.setText("Cambiar contraseña");
        cambiarPass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cambiarPassActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(28, 28, 28)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(layout.createSequentialGroup()
                        .add(nickLabel)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(cambiarPass)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(cerrarSesion))
                    .add(jLabel1)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 195, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(layout.createSequentialGroup()
                                .add(19, 19, 19)
                                .add(iniciarChat)))
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                .add(layout.createSequentialGroup()
                                    .add(171, 171, 171)
                                    .add(mandarSolicitud))
                                .add(layout.createSequentialGroup()
                                    .add(116, 116, 116)
                                    .add(jLabel3))
                                .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                                    .add(102, 102, 102)
                                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                        .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 192, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .add(layout.createSequentialGroup()
                                            .add(33, 33, 33)
                                            .add(anhadirAmigos)))
                                    .add(151, 151, 151)))
                            .add(layout.createSequentialGroup()
                                .add(53, 53, 53)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(amigoBuscado)
                                    .add(layout.createSequentialGroup()
                                        .add(jLabel2)
                                        .add(18, 18, 18)
                                        .add(buscar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 154, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(buscarBoton)))))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(28, 28, 28)
                        .add(nickLabel)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(jLabel1))
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(cerrarSesion)
                            .add(cambiarPass))))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(layout.createSequentialGroup()
                        .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 233, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(32, 32, 32)
                        .add(iniciarChat))
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel2)
                            .add(buscar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(buscarBoton))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(amigoBuscado)
                            .add(mandarSolicitud))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(jLabel3)
                        .add(18, 18, 18)
                        .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 127, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(anhadirAmigos)))
                .addContainerGap(98, Short.MAX_VALUE))
        );

        nickLabel.setText("Hola ");
    }// </editor-fold>//GEN-END:initComponents

    private void cerrarSesionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cerrarSesionActionPerformed
        try {
            cliente.cerrarSesion(nick);
        } catch (RemoteException ex) {
            Logger.getLogger(PrincipalChat.class.getName()).log(Level.SEVERE, null, ex);
        }
        v.dispose();
    }//GEN-LAST:event_cerrarSesionActionPerformed

    private void iniciarChatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_iniciarChatActionPerformed
        // TODO add your handling code here:
        String receptor= (String) listaAmigos.getSelectedValue();
        IClienteP2P receptorp2p;
        //try {
       
        Iterator it = amigosConectados.entrySet().iterator();
        while (it.hasNext()) {
            Map.Entry e = (Map.Entry) it.next();

            if (e.getKey().equals(receptor)) {
                Chat chat;
                if (conversaciones.containsKey(receptor)) {
                    chat = conversaciones.get(receptor);
                } else {
                    receptorp2p = (IClienteP2P) e.getValue();
                    chat = new Chat(nick, receptor, this);
                    conversaciones.put(receptor, chat);
                }

                chat.setVisible(true);
                
                break;
            }
        }
    }//GEN-LAST:event_iniciarChatActionPerformed

    
    
    
    
    private void anhadirAmigosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_anhadirAmigosActionPerformed
        // TODO add your handling code here:
        ArrayList<String> amigosAceptados= new ArrayList<String>();
        ArrayList<String> amigosRechazados=new ArrayList<String>();
       
        for(int i=0; i<tabla.getRowCount();i++){
        if((Boolean) tabla.getValueAt(i, 1)!=null){
             amigosAceptados.add((String)tabla.getValueAt(i, 0));
        }
        else{
        
        amigosRechazados.add((String)tabla.getValueAt(i, 0));
        
        }
        
        }
        
        while(tabla.getRowCount() > 0){
            tabla.removeRow(0);
        
        }
        
        tablaPeticiones.setModel(tabla);
        
        try {
            cliente.aceptarAmistad(nick, amigosAceptados, amigosRechazados);
            
        } catch (RemoteException ex) {
            Logger.getLogger(PrincipalChat.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_anhadirAmigosActionPerformed

    private void buscarBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarBotonActionPerformed
        try {
            // TODO add your handling code here:
            cliente.buscar(nick,buscar.getText());
        } catch (RemoteException ex) {
            Logger.getLogger(PrincipalChat.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_buscarBotonActionPerformed

    private void mandarSolicitudActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mandarSolicitudActionPerformed
        // TODO add your handling code here:
        if(amigoBuscado.getText()!=" "){
           
            try {
                cliente.solicitarAmistad(nick, amigoBuscado.getText());
                amigoBuscado.setText(" ");
                mandarSolicitud.setVisible(false);
            } catch (RemoteException ex) {
                Logger.getLogger(PrincipalChat.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            
        
        
        }
        
    }//GEN-LAST:event_mandarSolicitudActionPerformed

    private void cambiarPassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cambiarPassActionPerformed
        // TODO add your handling code here:
        
         cpass=new CambiarPass(this, nick);
      
         v.setVisible(false);
         
         
        
        
        
    }//GEN-LAST:event_cambiarPassActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel amigoBuscado;
    private javax.swing.JButton anhadirAmigos;
    private javax.swing.JTextField buscar;
    private javax.swing.JButton buscarBoton;
    private javax.swing.JButton cambiarPass;
    private javax.swing.JButton cerrarSesion;
    private javax.swing.JButton iniciarChat;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList listaAmigos;
    private javax.swing.JButton mandarSolicitud;
    private javax.swing.JLabel nickLabel;
    private javax.swing.JTable tablaPeticiones;
    // End of variables declaration//GEN-END:variables

    
}
